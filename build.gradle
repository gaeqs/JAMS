/*
 *  MIT License
 *
 *  Copyright (c) 2021 Gael Rial Costas
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

plugins {
    id 'java'
    id 'java-library'
    id 'org.openjfx.javafxplugin' version '0.0.10'
    id 'org.beryx.runtime' version '1.12.4'
    id 'maven-publish'
}

def projectGroup = 'net.jamsimulator'
def projectId = "JAMS"
def projectMainClass = "net.jamsimulator.jams.Jams"

def javafxVersion = '16'
def javafxDependencies = ['javafx-base', 'javafx-controls', 'javafx-media', 'javafx-graphics', 'javafx-fxml', 'javafx-swing']
def bundleLibs = false
def winConsole = false

group projectGroup
version '0.4-BETA-SNAPSHOT'

repositories {
    mavenCentral()
    maven {
        url "https://jitpack.io"
    }
}

configurations {
    jarLib
}

javafx {
    version = javafxVersion
    modules = ['javafx.base', 'javafx.controls', 'javafx.media', 'javafx.graphics', 'javafx.fxml', 'javafx.swing']
}

application {
    mainModule.set("JAMS.main")
    mainClass.set(projectMainClass)
}

dependencies {
    implementation group: 'com.github.goxr3plus', name: 'FX-BorderlessScene', version: '4.4.0'
    implementation group: 'org.json', name: 'json', version: '20210307'
    implementation 'org.jetbrains:annotations:22.0.0'

    implementation 'com.github.gaeqs:RichTextFX:fcdb504a'
    implementation group: 'org.reactfx', name: 'reactfx', version: '2.0-M5'
    implementation group: 'org.fxmisc.undo', name: 'undofx', version: '2.1.1'
    implementation group: 'org.fxmisc.flowless', name: 'flowless', version: '0.6.7'
    implementation group: 'org.fxmisc.wellbehaved', name: 'wellbehavedfx', version: '0.3.3'

    implementation 'com.github.gaeqs:RichTextFX:-SNAPSHOT'

    javafxDependencies.each {
        jarLib group: 'org.openjfx', name: it, version: javafxVersion, classifier: 'win'
        jarLib group: 'org.openjfx', name: it, version: javafxVersion, classifier: 'mac'
        jarLib group: 'org.openjfx', name: it, version: javafxVersion, classifier: 'linux'
    }

    jarLib group: 'com.github.goxr3plus', name: 'FX-BorderlessScene', version: '4.4.0'
    jarLib group: 'org.json', name: 'json', version: '20210307'


    jarLib 'com.github.gaeqs:RichTextFX:fcdb504a'
    jarLib group: 'org.reactfx', name: 'reactfx', version: '2.0-M5'
    jarLib group: 'org.fxmisc.undo', name: 'undofx', version: '2.1.1'
    jarLib group: 'org.fxmisc.flowless', name: 'flowless', version: '0.6.7'
    jarLib group: 'org.fxmisc.wellbehaved', name: 'wellbehavedfx', version: '0.3.3'

    jarLib 'com.github.gaeqs:RichTextFX:-SNAPSHOT'

    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.2'
}

compileJava {
    options.encoding = 'UTF-8'
    options.incremental = true
}

javadoc {
    options.encoding = "UTF-8"
}

processResources {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    from('src/main/resources') {
        include '*.json'
        filter { String line -> line.replace("\${VERSION}", project.version) }
    }
}

jar {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    manifest {
        attributes "Main-Class": projectMainClass
        attributes "Specification-Title": projectId
        attributes "Specification-Version": archiveVersion
        attributes "Specification-Vendor": projectGroup
        attributes "Implementation-Title": projectId
        attributes "Implementation-Version": archiveVersion
        attributes "Implementation-Vendor": projectGroup
    }

    doFirst {
        if (bundleLibs) {
            from {
                configurations.jarLib.collect { it.isDirectory() ? it : zipTree(it) }
            }
        }
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier('sources')
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier('javadoc')
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

task bundle {
    dependsOn clean
    group = "build"

    doLast {
        bundleLibs = true
    }

    finalizedBy build
}


runtime {
    options.addAll(['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages'])
    version = normalizeAppVersion(version as String)
    launcher {
        jvmArgs = ['-Dlogback.configurationFile=./logback.xml']
    }
    jpackage {
        def ver = normalizeAppVersion(version as String)
        appVersion = ver

        //Splash is bugged in windows.
        //jvmArgs = ['-splash:$APPDIR/logo.png']

        imageOptions = ["--verbose"]
        installerOptions = ['--vendor', 'jamsimulator.net', '--file-associations', 'src/main/resources/associations.properties']
        imageOptions = ['--icon', 'src/main/resources/gui/icon/logo.ico']
        if (org.gradle.internal.os.OperatingSystem.current().windows) {
            if (winConsole) {
                imageOptions += ['--win-console']
            }
            installerOptions += ['--win-per-user-install', '--win-dir-chooser', '--win-menu']
        } else if (org.gradle.internal.os.OperatingSystem.current().linux) {
            installerOptions += ['--linux-menu-group', 'programming']

            installerType = "deb"
        } else if (org.gradle.internal.os.OperatingSystem.current().macOsX) {
            appVersion = '1.0.0'
            imageOptions += [
                    '--app-version', '1.0.0',
                    '--copyright', 'JAMS 2021',
                    '--mac-package-name', 'JAMS',
            ]

            installerType = "dmg"
        }
    }
}

test {
    useJUnitPlatform()
    testLogging.showStandardStreams = true
}

static String normalizeAppVersion(final String appVersion) {
    if (org.gradle.internal.os.OperatingSystem.current().linux) {
        // Replace '-' with '.' for rpmbuild
        return appVersion.replace('-', '.')
    } else {
        // This is a hack attempt to assure the version conforms to MSI productVersion string rules
        // See https://docs.microsoft.com/en-us/windows/win32/msi/productversion
        // For now, we'll just remove '-SNAPSHOT' if present.
        return appVersion.replaceAll('-SNAPSHOT$', '').replaceAll('-ALPHA$', '').replaceAll('-BETA$', '')
    }
}

tasks.jpackageImage.doLast {
    copy {
        from "src/main/resources/gui/icon"
        include "logo.png"
        into "build/jpackage/$project.name/app"
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            //setGroupId groupId
            groupId =  projectGroup
            //setArtifactId artifactId
            artifactId = projectId
            version =  this.version
            from components.java
        }
    }
}