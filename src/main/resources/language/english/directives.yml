DIRECTIVE_ALIGN_DOCUMENTATION: |-
  <u>Align</u>

  <b>Format:</b>
  .align <0-3>

  <b>Description:</b>
  Aligns the next memory insertion to a 2^n multiple address.
DIRECTIVE_ASCII_DOCUMENTATION: |-
  <u>Insert ASCII strings</u>

  <b>Format:</b>
  .ascii {"Text"}

  <b>Description:</b>
  Inserts into the memory the given ASCII strings.
DIRECTIVE_ASCIIZ_DOCUMENTATION: |-
  <u>Insert ASCII strings, ending with a null character</u>

  <b>Format:</b>
  .asciiz {"Text"}

  <b>Description:</b>
  Inserts into the memory the given ASCII strings, adding at the end of each string a null (\0) character.
DIRECTIVE_BYTE_DOCUMENTATION: |-
  <u>Insert bytes</u>

  <b>Format:</b>
  .byte {byte | 'character'} 

  <b>Description:</b>
  Inserts into the memory the given bytes.
DIRECTIVE_DATA_DOCUMENTATION: |-
  <u>Change to data section</u>

  <b>Format:</b>
  .data [address]

  <b>Description:</b>
  Makes the next memory insertions to be placed into the data section.
  If an address is given, the next memory insertions will be placed starting from the given address.
DIRECTIVE_DWORD_DOCUMENTATION: |-
  <u>Insert double words / longs</u>

  <b>Format:</b>
  .dword {dword}

  <b>Description:</b>
  Inserts into the memory the given double words.
DIRECTIVE_ENDMACRO_DOCUMENTATION: |-
  <u>End macro</u>

  <b>Format:</b>
  .endmacro

  <b>Description:</b>
  Ends the current macro definition.
  If no macro is being defined this directive will be ignored.
DIRECTIVE_EQV_DOCUMENTATION: |-
  <u>Equivalent</u>

  <b>Format:</b>
  .eqv <key> <value>

  <b>Description:</b>
  Replaces the key in the following lines of the file with the value.

  <b>Programming Notes:</b>
  Avoid using this directive for complex replacements.
  It should be used only for registers and immediates.
DIRECTIVE_ERR_DOCUMENTATION: |-
  <u>Error</u>

  <b>Format:</b>
  .err

  <b>Description:</b>
  Produces an assemble exception.
DIRECTIVE_EXTERN_DOCUMENTATION: |-
  <u>Allocate extern memory</u>

  <b>Format:</b>
  .extern <label> <amount>

  <b>Description:</b>
  Allocates the given amount of bytes into the extern section of the memory.
  The created label will be considered a global label.
DIRECTIVE_FLOAT_DOCUMENTATION: |-
  <u>Insert float</u>

  <b>Format:</b>
  .float {float}

  <b>Description:</b>
  Inserts into the memory the given floats.
DIRECTIVE_GLOBL_DOCUMENTATION: |-
  <u>Make label global</u>

  <b>Format:</b>
  .globl <label>

  <b>Description:</b>
  Makes the given label global.
DIRECTIVE_HALF_DOCUMENTATION: |-
  <u>Insert half words</u>

  <b>Format:</b>
  .half {half word}

  <b>Description:</b>
  Inserts into the memory the given half words.
DIRECTIVE_INCLUDE_DOCUMENTATION: |-
  <u>Include file</u>

  <b>Format:</b>
  .include <file>

  <b>Description:</b>

  Replaces this directive with the contents of the given file.

  <b>Programming Notes:</b>
  Avoid using this directive: it may cause recursive loops and prevents the inspector from working properly.
DIRECTIVE_KDATA_DOCUMENTATION: |-
  <u>Change to kernel data section</u>

  <b>Format:</b>
  .kdata [address]

  <b>Description:</b>
  Makes the next memory insertions to be placed into the kernel data section.
  If an address is given, the next memory insertions will be placed starting from the given address.
DIRECTIVE_KTEXT_DOCUMENTATION: |-
  <u>Change to text section</u>

  <b>Format:</b>
  .text [address]

  <b>Description:</b>
  Makes the next memory insertions to be placed into the text section.
  If an address is given, the next memory insertions will be placed starting from the given address.
DIRECTIVE_LAB_DOCUMENTATION: |-
  <u>Create label</u>

  <b>Format:</b>
  .lab <label>

  <b>Description:</b>
  Creates the given label.
DIRECTIVE_MACRO_DOCUMENTATION: |- 
  <u>Macro</u>
  
  <b>Format:</b>
  .macro <name>
  .macro <name> ()
  .macro <name> ({%parameter})
  
  <b>Description:</b>
  Starts a macro definition.
  A macro can be used to define a set of instructions that will be used constantly.
  Macros can have parameters. All parameters should start with "%" and they will be replaced when a call to the macro is executed.
  A macro call must have this format: name (param1, param2). The space between the name and the first parentheses can be replaced with a comma or a tab.
  
  <b>Example:</b>
  
  This code creates a macro that prints a string:
  
  El siguiente c√≥digo crea una macro que imprime una cadena de caracteres:
    .macro print (%string)
    .data
  text: .asciiz %string
    .text
    la $a0, text
    li $v0, 4
    syscall
    .endmacro
    .text
    print ("Hi!\\n")
    print ("I'm using macros!\\n\")
  
  Output:
  Hi!
  I'm using macros!
DIRECTIVE_SPACE_DOCUMENTATION: |-
  <u>Allocate memory</u>

  <b>Format:</b>
  .space <amount>

  <b>Description:</b>
  Allocates the given amount of bytes into memory.
DIRECTIVE_WORD_DOCUMENTATION: |-
  <u>Insert words</u>

  <b>Format:</b>
  .word {word | label}

  <b>Description:</b>
  Inserts into the memory the given words.
  If a label is given, its address will be inserted instead.